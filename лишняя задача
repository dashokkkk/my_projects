При планировании межпланетной миссии в марсоход «зашили» ежедневные планы работ — списки задач на каждый день. Но в реальности оказалось, что планы слишком объёмны: марсоход не успевает выполнить за день все запланированные задачи.
В Центре управления марсоходами решили сократить ежедневный объём работ. Для этого марсоход ежедневно должен удалять из своего дневного расписания одну задачу. Какую именно задачу удалить — определяют в ЦУМе. Договориться толком руководители Центра не смогли и каждый день бросают жребий, случайным образом выбирая задачу для удаления. Индекс удаляемого задания передаётся марсоходу.
Технические условия задания

Перечень заданий хранится в связном списке.
Для выполнения задания используйте прекод.
Напишите функцию solution(), которая принимает на вход голову связного списка и индекс элемента. Функция должна удалить из списка элемент с указанным индексом и вернуть голову обновлённого списка.
В этой задаче не нужно считывать входные данные.

Прекод

# Импорт модуля os из стандартной библиотеки 
# для взаимодействия с операционной системой.
import os
# Считывание переменной окружения REMOTE_JUDGE, чтобы определить, 
# локально выполняется код или на удалённом сервере.
LOCAL = os.environ.get('REMOTE_JUDGE', 'false') != 'true'

# Если код выполняется на локальном компьютере, то...
if LOCAL:
    # Класс, описывающий элементы связного списка:
    class Node:
        def __init__(self, value, next_item=None):
            self.value = value
            self.next_item = next_item


def solution(node, idx):
    # Напишите код функции здесь.
    # ヽ(´▽`)/
    pass


# Тестирующая функция для проверки решения.
# Не изменяйте её, она не требует вашего внимания.
def test():
    node3 = Node("Задача 4: Обследовать грунт в радиусе 3 м", None)
    node2 = Node("Задача 3: Измерить температуру атмосферы", node3)
    node1 = Node("Задача 2: Пробурить скважину глубиной 0.5 м", node2)
    node0 = Node("Задача 1: Фотосъёмка 360°", node1)

    new_head = solution(node0, 1)
    # Выражение, начинающееся с ключевого слова assert,
    # проверяет, что утверждение в выражении истинно.
    # Если утверждение ложно - в этом месте возникнет ошибка.
    assert new_head is node0
    assert new_head.next_item is node2
    assert new_head.next_item.next_item is node3
    assert new_head.next_item.next_item.next_item is None
    # result is node0 -> node2 -> node3


if __name__ == '__main__':
    test()
Формат ввода

Функция принимает голову списка и индекс элемента, который надо удалить (нумерация с нуля). Список содержит не более 5000 элементов. Список не бывает пустым.

Формат вывода

Функция должна вернуть голову связного списка, в котором удалён нужный элемент.

# Импорт модуля os из стандартной библиотеки 
# для взаимодействия с операционной системой.
import os
# Считывание переменной окружения REMOTE_JUDGE, чтобы определить, 
# локально выполняется код или на удалённом сервере.
LOCAL = os.environ.get('REMOTE_JUDGE', 'false') != 'true'

# Если код выполняется на локальном компьютере, то...
if LOCAL:
    # Класс, описывающий элементы связного списка:
    class Node:
        def __init__(self, value, next_item=None):
            self.value = value
            self.next_item = next_item


def solution(node, idx):
    # Напишите код функции здесь.
    # ヽ(´▽`)/
    if idx == 0:  # Если удаляем головной элемент
        new_head = node.next_item
        return new_head
    current = node
    for i in range(idx - 1):  # Проходим до нужного элемента
        current = current.next_item
        if current is None:  # Запоминаем предыдущий элемент
            return node
    if current.next_item is not None:
        current.next_item = current.next_item.next_item
    return node   # Переходим к следующему элементу
       # Разрываем связь между предыдущим и текущим элемента



# Тестирующая функция для проверки решения.
# Не изменяйте её, она не требует вашего внимания.
def test():
    node3 = Node("Задача 4: Обследовать грунт в радиусе 3 м", None)
    node2 = Node("Задача 3: Измерить температуру атмосферы", node3)
    node1 = Node("Задача 2: Пробурить скважину глубиной 0.5 м", node2)
    node0 = Node("Задача 1: Фотосъёмка 360°", node1)

    new_head = solution(node0, 1)
    # Выражение, начинающееся с ключевого слова assert,
    # проверяет, что утверждение в выражении истинно.
    # Если утверждение ложно - в этом месте возникнет ошибка.
    assert new_head is node0
    assert new_head.next_item is node2
    assert new_head.next_item.next_item is node3
    assert new_head.next_item.next_item.next_item is None
    # result is node0 -> node2 -> node3


if __name__ == '__main__':
    test()
