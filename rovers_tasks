Марсоход получает с Земли сокращённые инструкции с заданиями, например:
с — сделать снимок;
в — взять образец грунта;
ш — сделать шаг;
о — включить освещение;
и — инициировать сканирование местности.
Из-за ограничений канала связи инструкции отправляются в сжатом виде. Например, если марсоходу нужно сделать 10 снимков подряд, инструкция будет выглядеть как 10[с].
Число перед квадратными скобками обозначает, сколько раз надо повторить последовательность внутри скобок. Скобки могут быть и вложенными: 2[ш3[с]]10[с].
Таким образом, командный центр на Земле может отправить марсоходу сжатую строку инструкций, а марсоход получит и расшифрует её в полную последовательность команд.
Команды могут обозначаться символами латиницы или кириллицы.
Пример:
Команда: 2[с]3[в]ш
Расшифровка: «ссвввш».
Смысл: сделать два снимка, взять три образца грунта и сделать шаг.
Пример 2:
Команда: 2[в3[ш]]с
Расшифровка: «вшшшвшшшс»
Смысл: Взять образец грунта, сделать три шага; взять образец грунта, сделать три шага; сделать снимок.
Напишите программу, которая расшифровывает сжатые сообщения и возвращает строку с командами.
Не забудьте добавить в код аннотации типов данных.
После успешного прохождения тестов на платформе Яндекс Контест отправьте решение на проверку ревьюеру.
Формат ввода

Сокращенная форма команды. Например, 3[a]2[bc]. Гарантированно приходит валидная строка. В строке могут быть только буквы, числа и квадратные скобки.
Длина строки может находиться в диапазоне от 0 (пустая строка) до 30 символов включительно. Числа в строке могут быть от 1 до 300 включительно.
Формат вывода

Полная форма команды. Например, aaabcbc.
Пример 1

Ввод	
3[a]2[bc]
Вывод
aaabcbc

Пример 2

Ввод
3[a2[c]]
Вывод
accaccacc

Пример 3

Ввод	
2[abc]3[cd]ef
Вывод
abcabccdcdcdef


def decode_string(tasks: str) -> str:
    stack: list = []
    decoded_string = ''
    actual_number = ''
    for symbol in tasks:
        if symbol.isdigit():
            actual_number += symbol
        elif symbol == '[':
            stack.append((decoded_string, int(actual_number)))
            decoded_string = ''
            actual_number = ''
        elif symbol == ']':
            prev_str, prev_num = stack.pop()
            decoded_string = prev_str + prev_num * decoded_string
        else:
            decoded_string += symbol
    return decoded_string


if __name__ == '__main__':
    tasks = input('')
    result = decode_string(tasks)
    print(result)
